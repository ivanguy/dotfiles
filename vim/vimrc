set nocompatible
autocmd! bufwritepost .vimrc source %

set t_Co=256
set background=dark
"set background=light
color wombat256mod
"color eclipse
"color freya
"colo oceanlight

call plug#begin('~/.vim/plugged')
Plug 'Raimondi/delimitMate'
"Plug 'Valloric/YouCompleteMe', { 'on': [] }
"Plug 'Chiel92/vim-autoformat'  " help autoformat
"Plug 'mattn/emmet-vim'
"Plug 'ctrlpvim/ctrlp.vim'
Plug 'scrooloose/nerdcommenter'  " help nerdcommenter
"Plug 'nathanaelkane/vim-indent-guides'  " help indent-guides
Plug 'itchyny/lightline.vim'
Plug 'tpope/vim-fugitive'  " git wrapper, needed for lightline branch
"Plug 'airblade/vim-gitgutter'
"Plug 'easymotion/vim-easymotion'
call plug#end()


" lightline
set laststatus=2  " fix for lightline only show on :vsp
set noshowmode  " disable vim's default statusline
let g:lightline = {
\ 'colorscheme': 'wombat',
\ 'active': {
\   'left': [ [ 'mode', 'paste' ],
\             [ 'fugitive', 'readonly', 'filename', 'modified' ] ]
\ },
\ 'component': {
\   'absolutepath': '%F',
\   'path': '%f',
\   'readonly': '%{&filetype=="help"?"":&readonly?"RO":""}',
\   'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}',
\   'fugitive': '%{exists("*fugitive#head")?fugitive#head():""}'
\ },
\ 'component_visible_condition': {
\   'readonly': '(&filetype!="help"&& &readonly)',
\   'modified': '(&filetype!="help"&&(&modified||!&modifiable))',
\   'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())'
\ },
\
\
\ }
"  \ 'separator': { 'left': '|', 'right': '|' },
"  \ 'subseparator': { 'left': '|', 'right': '|' }

" ctrlP
let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("e")': ['<c-t>'],
    \ 'AcceptSelection("t")': ['<cr>', '<2-LeftMouse>'],
    \ }

"Autoformat
let g:autoformat_autoindent = 0

"set number
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround
set expandtab
set autoindent
set foldmethod=indent
set nolist
set nowrap
set hls

filetype plugin indent on
syntax on

" set correct fyletype for .twig
au BufNewFile,BufRead *.twig set filetype=html

map <leader>e <C-y>,  " emmet expand abbr
"map kj <ESC>



" Hide Clutter
let s:hidden_all = 0
function! ToggleHiddenAll()
  if s:hidden_all  == 0
    let s:hidden_all = 1
    set noshowmode
    set noruler
    set laststatus=0
    set noshowcmd
    set nonumber
  else
    let s:hidden_all = 0
    set showmode
    set ruler
    set laststatus=2
    set showcmd
    set number
  endif
endfunction

nnoremap <S-h> :call ToggleHiddenAll()<CR>
imap kj <ESC>

